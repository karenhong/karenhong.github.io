var _user$project$Update$fromCode = function (keyCode) {
	var _p0 = keyCode;
	switch (_p0) {
		case 13:
			return _user$project$Game_Avatar_Model$Enter;
		case 27:
			return _user$project$Game_Avatar_Model$Escape;
		case 37:
			return _user$project$Game_Avatar_Model$LeftArrowKey;
		case 39:
			return _user$project$Game_Avatar_Model$RightArrowKey;
		case 32:
			return _user$project$Game_Avatar_Model$SpaceBar;
		default:
			return _user$project$Game_Avatar_Model$Unknown;
	}
};
var _user$project$Update$appendScore = F2(
	function (list, hs) {
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(list),
			3) < 0) {
			return A2(
				_elm_lang$core$List$append,
				list,
				{
					ctor: '::',
					_0: hs,
					_1: {ctor: '[]'}
				});
		} else {
			var _p1 = _elm_lang$core$List$head(
				A2(_elm_lang$core$List$drop, 2, list));
			if (_p1.ctor === 'Just') {
				return (_elm_lang$core$Native_Utils.cmp(_p1._0.score, hs.score) < 1) ? A2(
					_elm_lang$core$List$append,
					A2(_elm_lang$core$List$take, 2, list),
					{
						ctor: '::',
						_0: hs,
						_1: {ctor: '[]'}
					}) : list;
			} else {
				return list;
			}
		}
	});
var _user$project$Update$sortScores = F2(
	function (hs1, hs2) {
		return (_elm_lang$core$Native_Utils.cmp(hs1.score, hs2.score) < 0) ? _elm_lang$core$Basics$GT : ((_elm_lang$core$Native_Utils.cmp(hs1.score, hs2.score) > 0) ? _elm_lang$core$Basics$LT : _elm_lang$core$Basics$EQ);
	});
var _user$project$Update$NoOp = {ctor: 'NoOp'};
var _user$project$Update$NewPlatform = function (a) {
	return {ctor: 'NewPlatform', _0: a};
};
var _user$project$Update$updateOutMsg = F2(
	function (msg, model) {
		var _p2 = _user$project$Game_Update$updateOutMsg(model.game);
		switch (_p2.ctor) {
			case 'GeneratePlatform':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_elm_lang$core$Random$generate, _user$project$Update$NewPlatform, _user$project$Game_GamePlatform_Update$platformGenerator)
				};
			case 'NewScore':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{screen: _user$project$Model$GameOverScreen}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		return A2(
			_user$project$Update$updateOutMsg,
			msg,
			function () {
				var _p3 = msg;
				switch (_p3.ctor) {
					case 'TimeUpdate':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								game: A2(
									_user$project$Game_Update$update,
									_user$project$Game_Update$TimeUpdate(_p3._0),
									model.game)
							});
					case 'KeyDown':
						var _p4 = _p3._0;
						return (_elm_lang$core$Native_Utils.eq(model.screen, _user$project$Model$StartScreen) && _elm_lang$core$Native_Utils.eq(
							_user$project$Game_Avatar_Model$Enter,
							_user$project$Update$fromCode(_p4))) ? _elm_lang$core$Native_Utils.update(
							model,
							{screen: _user$project$Model$PlayScreen}) : ((_elm_lang$core$Native_Utils.eq(model.screen, _user$project$Model$GameOverScreen) && _elm_lang$core$Native_Utils.eq(
							_user$project$Game_Avatar_Model$Enter,
							_user$project$Update$fromCode(_p4))) ? _elm_lang$core$Native_Utils.update(
							model,
							{
								game: _user$project$Game_Model$model,
								screen: _user$project$Model$StartScreen,
								highScores: A2(
									_elm_lang$core$List$sortWith,
									_user$project$Update$sortScores,
									A2(
										_user$project$Update$appendScore,
										model.highScores,
										{name: model.playerName, score: model.game.avatar.score}))
							}) : (_elm_lang$core$Native_Utils.eq(
							_user$project$Game_Avatar_Model$Escape,
							_user$project$Update$fromCode(_p4)) ? _elm_lang$core$Native_Utils.update(
							model,
							{game: _user$project$Game_Model$model, screen: _user$project$Model$StartScreen}) : (_elm_lang$core$Native_Utils.eq(model.screen, _user$project$Model$PlayScreen) ? _elm_lang$core$Native_Utils.update(
							model,
							{
								game: A2(
									_user$project$Game_Update$update,
									_user$project$Game_Update$MsgForAvatar(
										_user$project$Game_Avatar_Update$KeyDown(
											_user$project$Update$fromCode(_p4))),
									model.game)
							}) : model)));
					case 'KeyUp':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								game: A2(
									_user$project$Game_Update$update,
									_user$project$Game_Update$MsgForAvatar(
										_user$project$Game_Avatar_Update$KeyUp(
											_user$project$Update$fromCode(_p3._0))),
									model.game)
							});
					case 'Resize':
						return _elm_lang$core$Native_Utils.update(
							model,
							{size: _p3._0});
					case 'NewPlatform':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								game: A2(
									_user$project$Game_Update$update,
									_user$project$Game_Update$NewPlatform(_p3._0),
									model.game)
							});
					case 'InputName':
						return _elm_lang$core$Native_Utils.update(
							model,
							{playerName: _p3._0});
					default:
						return model;
				}
			}());
	});
var _user$project$Update$InputName = function (a) {
	return {ctor: 'InputName', _0: a};
};
var _user$project$Update$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Update$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Update$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Update$TimeUpdate = function (a) {
	return {ctor: 'TimeUpdate', _0: a};
};
