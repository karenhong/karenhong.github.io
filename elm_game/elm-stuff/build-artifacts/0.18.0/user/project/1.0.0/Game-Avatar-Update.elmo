var _user$project$Game_Avatar_Update$updateScore = F2(
	function (platform, avatar) {
		var _p0 = platform.unit;
		switch (_p0.ctor) {
			case 'TwoBones':
				return avatar.score + 50;
			case 'ThreeBones':
				return avatar.score + 100;
			default:
				return avatar.score;
		}
	});
var _user$project$Game_Avatar_Update$checkShieldTime = F2(
	function (avatar, multiplier) {
		return (_elm_lang$core$Native_Utils.cmp(avatar.invincible.timeLimit, 0) > 0) ? {
			isInvincible: true,
			timeLimit: A2(_elm_lang$core$Basics$max, avatar.invincible.timeLimit - (1 * multiplier), 0)
		} : {isInvincible: false, timeLimit: 0};
	});
var _user$project$Game_Avatar_Update$updateShield = F2(
	function (platform, avatar) {
		var _p1 = platform.unit;
		if (_p1.ctor === 'Shield') {
			return {isInvincible: true, timeLimit: 300};
		} else {
			return {isInvincible: avatar.invincible.isInvincible, timeLimit: avatar.invincible.timeLimit};
		}
	});
var _user$project$Game_Avatar_Update$checkTimeLimit = F2(
	function (avatar, multiplier) {
		return (_elm_lang$core$Native_Utils.cmp(avatar.speed.timeLimit, 0) > 0) ? {
			multiplier: avatar.speed.multiplier,
			timeLimit: A2(_elm_lang$core$Basics$max, avatar.speed.timeLimit - (1 * multiplier), 0)
		} : {multiplier: 1.0, timeLimit: 0};
	});
var _user$project$Game_Avatar_Update$updateSpeed = F2(
	function (platform, avatar) {
		var _p2 = platform.unit;
		if (_p2.ctor === 'Boost') {
			return {
				multiplier: A2(_elm_lang$core$Basics$min, avatar.speed.multiplier + 0.5, 2.0),
				timeLimit: 300
			};
		} else {
			return {multiplier: avatar.speed.multiplier, timeLimit: avatar.speed.timeLimit};
		}
	});
var _user$project$Game_Avatar_Update$updateHp = F2(
	function (platform, avatar) {
		if (_elm_lang$core$Native_Utils.eq(avatar.invincible.isInvincible, false)) {
			var _p3 = platform.unit;
			switch (_p3.ctor) {
				case 'Spikes':
					return A2(_elm_lang$core$Basics$max, avatar.hp - 1, 0);
				case 'Waste':
					return A2(_elm_lang$core$Basics$max, avatar.hp - 10, 0);
				case 'Zombie':
					return A2(_elm_lang$core$Basics$max, avatar.hp - 5, 0);
				case 'HP':
					return A2(_elm_lang$core$Basics$min, avatar.hp + 10, 100);
				default:
					return avatar.hp;
			}
		} else {
			return avatar.hp;
		}
	});
var _user$project$Game_Avatar_Update$updateStatus = F2(
	function (platform, avatar) {
		return _elm_lang$core$Native_Utils.update(
			avatar,
			{
				hp: A2(_user$project$Game_Avatar_Update$updateHp, platform, avatar),
				speed: A2(_user$project$Game_Avatar_Update$updateSpeed, platform, avatar),
				score: A2(_user$project$Game_Avatar_Update$updateScore, platform, avatar),
				invincible: A2(_user$project$Game_Avatar_Update$updateShield, platform, avatar)
			});
	});
var _user$project$Game_Avatar_Update$walk = F2(
	function (newVx, avatar) {
		return _elm_lang$core$Native_Utils.update(
			avatar,
			{
				dir: (_elm_lang$core$Native_Utils.cmp(newVx, 0) < 0) ? _user$project$Game_Avatar_Model$Left : ((_elm_lang$core$Native_Utils.cmp(newVx, 0) > 0) ? _user$project$Game_Avatar_Model$Right : avatar.dir),
				vx: ((_elm_lang$core$Native_Utils.cmp(avatar.x, 0 - _user$project$ViewUtil$halfWidth) < 1) && _elm_lang$core$Native_Utils.eq(avatar.dir, _user$project$Game_Avatar_Model$Left)) ? 0 : (newVx * avatar.speed.multiplier)
			});
	});
var _user$project$Game_Avatar_Update$jump = F2(
	function (avatar, isStanding) {
		return isStanding ? _elm_lang$core$Native_Utils.update(
			avatar,
			{vy: _user$project$Game_Avatar_Model$jumpVelocity}) : avatar;
	});
var _user$project$Game_Avatar_Update$keyDown = F3(
	function (key, avatar, isStanding) {
		var _p4 = key;
		switch (_p4.ctor) {
			case 'LeftArrowKey':
				return A2(_user$project$Game_Avatar_Update$walk, 0 - _user$project$Game_Avatar_Model$defaultSpeed, avatar);
			case 'RightArrowKey':
				return A2(_user$project$Game_Avatar_Update$walk, _user$project$Game_Avatar_Model$defaultSpeed, avatar);
			case 'SpaceBar':
				return A2(_user$project$Game_Avatar_Update$jump, avatar, isStanding);
			default:
				return avatar;
		}
	});
var _user$project$Game_Avatar_Update$update = F3(
	function (msg, avatar, isStanding) {
		var _p5 = msg;
		if (_p5.ctor === 'KeyDown') {
			return A3(_user$project$Game_Avatar_Update$keyDown, _p5._0, avatar, isStanding);
		} else {
			return _elm_lang$core$Native_Utils.eq(_p5._0, _user$project$Game_Avatar_Model$SpaceBar) ? avatar : _elm_lang$core$Native_Utils.update(
				avatar,
				{vx: 0});
		}
	});
var _user$project$Game_Avatar_Update$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Game_Avatar_Update$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
