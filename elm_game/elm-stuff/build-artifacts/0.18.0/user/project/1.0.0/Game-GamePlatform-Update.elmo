var _user$project$Game_GamePlatform_Update$removeCollectible = function (prevPlatform) {
	return A4(_user$project$Game_GamePlatform_Model$Model, prevPlatform.w, prevPlatform.x, prevPlatform.y, _user$project$Game_GamePlatform_Model$None);
};
var _user$project$Game_GamePlatform_Update$hasCollectible = function (platform) {
	var _p0 = platform;
	if (_p0.ctor === 'Just') {
		var _p1 = _p0._0.unit;
		switch (_p1.ctor) {
			case 'Boost':
				return true;
			case 'HP':
				return true;
			case 'TwoBones':
				return true;
			case 'ThreeBones':
				return true;
			case 'Shield':
				return true;
			default:
				return false;
		}
	} else {
		return false;
	}
};
var _user$project$Game_GamePlatform_Update$generatePlatform = F2(
	function (newPlatform, previousPlatform) {
		var groundExtension = A4(_user$project$Game_GamePlatform_Model$Model, _user$project$ViewUtil$width / 2, previousPlatform.x + _user$project$ViewUtil$platformGap, (0 - _user$project$ViewUtil$halfHeight) + (_user$project$ViewUtil$platformHeight / 2), newPlatform.unit);
		var newPlatformY = previousPlatform.y + newPlatform.heightDiff;
		return (_elm_lang$core$Native_Utils.cmp(newPlatformY, _user$project$ViewUtil$halfHeight / 2) < 0) ? A4(_user$project$Game_GamePlatform_Model$Model, newPlatform.w, previousPlatform.x + _user$project$ViewUtil$platformGap, newPlatformY, newPlatform.unit) : groundExtension;
	});
var _user$project$Game_GamePlatform_Update$extendPlatforms = F2(
	function (newPlatform, platforms) {
		var _p2 = _elm_lang$core$List$head(platforms);
		if (_p2.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(_user$project$Game_GamePlatform_Update$generatePlatform, newPlatform, _p2._0),
				_1: platforms
			};
		} else {
			return platforms;
		}
	});
var _user$project$Game_GamePlatform_Update$assignUnit = function (generated) {
	return _elm_lang$core$Native_Utils.eq(generated, 1) ? _user$project$Game_GamePlatform_Model$Zombie(
		{ctor: '_Tuple2', _0: 0.0, _1: _user$project$Game_GamePlatform_Model$Right}) : ((_elm_lang$core$Native_Utils.cmp(generated, 4) < 1) ? _user$project$Game_GamePlatform_Model$Spikes : ((_elm_lang$core$Native_Utils.cmp(generated, 7) < 1) ? _user$project$Game_GamePlatform_Model$Waste : ((_elm_lang$core$Native_Utils.cmp(generated, 11) < 1) ? _user$project$Game_GamePlatform_Model$TwoBones : ((_elm_lang$core$Native_Utils.cmp(generated, 13) < 1) ? _user$project$Game_GamePlatform_Model$Boost : ((_elm_lang$core$Native_Utils.cmp(generated, 14) < 1) ? _user$project$Game_GamePlatform_Model$ThreeBones : ((_elm_lang$core$Native_Utils.cmp(generated, 15) < 1) ? _user$project$Game_GamePlatform_Model$HP : ((_elm_lang$core$Native_Utils.cmp(generated, 16) < 1) ? _user$project$Game_GamePlatform_Model$Shield : _user$project$Game_GamePlatform_Model$None)))))));
};
var _user$project$Game_GamePlatform_Update$unitGenerator = A2(
	_elm_lang$core$Random$map,
	_user$project$Game_GamePlatform_Update$assignUnit,
	A2(_elm_lang$core$Random$int, 1, 25));
var _user$project$Game_GamePlatform_Update$platformHeightDiffGenerator = A2(_elm_lang$core$Random$float, 90, 120);
var _user$project$Game_GamePlatform_Update$platformWidthGenerator = A2(_elm_lang$core$Random$float, 100, 400);
var _user$project$Game_GamePlatform_Update$platformGenerator = A4(_elm_lang$core$Random$map3, _user$project$Game_GamePlatform_Model$PlatformToGenerate, _user$project$Game_GamePlatform_Update$platformWidthGenerator, _user$project$Game_GamePlatform_Update$platformHeightDiffGenerator, _user$project$Game_GamePlatform_Update$unitGenerator);
